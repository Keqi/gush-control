h1 = @workflow.class

#canvas-svg

script
  == "var nodes = #{JSON.dump(@nodes)};"
  == "var links = #{JSON.dump(@links)};"

javascript:


  var WIDTH = 1800, HEIGHT = 900;

  var drawD3Document = function(nodes, links) {
      links.forEach(function(link) {
          link.source = nodes[link.source];
          link.target = nodes[link.target];
      });


      var zoom = d3.behavior.zoom().on("zoom", zoomed);

      function zoomed() {
        svg.attr("transform", "translate(" + d3.event.translate + ")scale(" + d3.event.scale + ")");
      }

      var width = WIDTH, height = HEIGHT;
      var force = d3.layout.force()
          .nodes(d3.values(nodes))
          .links(links).size([ width, height ])
          .linkDistance(100)
          .friction(0.7)
          .gravity(0.2)
          .theta(0.5)
          .charge(-1500).on("tick", tick).start();
      var svg = d3.select("#canvas-svg")
          .append("svg").attr("width", width).call(zoom).attr("height", height);
      svg.append("svg:defs").selectAll("marker")
          .data([ "end" ]).enter()
          .append("svg:marker").attr("id", String)
          .attr("viewBox", "0 -5 10 10")
          .attr("refX", 15).attr("refY", -1.5)
          .attr("markerWidth", 6).attr("markerHeight", 6)
          .attr("orient", "auto").append("svg:path")
          .attr("d", "M0,-5L10,0L0,5");

      var path = svg.append("g").selectAll("path")
          .data(force.links())
          .enter()
          .append("g")
          .attr("class", "link-group")
          .append("path")
              .attr("class", "link")
              .attr("id", function(d, i) { return "link" + i;})
              .attr("marker-end", "url(#end)");

      svg.selectAll(".link-group").append("text")
          .attr("dy", "-0.5em")
          .append("textPath")
          .attr("startOffset",function(d,i){return 8/20;})
          .attr("xlink:href",function(d,i){return "#link"+i;});

      var node = svg.selectAll(".node")
          .data(force.nodes())
          .enter().append("g")
          .attr("class", function(d) {
            var classes = "node " + d.name.toLowerCase();
            if (d.finished === true)
              classes += " finished";
            return classes;
          })
          .call(force.drag);
      node.append("circle")
          .attr("r", 10);
      node.append("text")
          .attr("text-anchor", "middle")
          .attr("dy", 30).text(function(d) {
          console.log(JSON.stringify(d));
          return d.name;
      });
      function tick() {
          path.attr("d", function(d) {
              return "M" + d.source.x + "," + d.source.y + "L" + d.target.x + "," + d.target.y;
          });
          node.attr("transform", function(d) {
              return "translate(" + d.x + "," + d.y + ")";
          });
      }
  };

  drawD3Document(nodes, links);

css:
  .link {
    fill: none;
    stroke: #666;
    stroke-width: 2px;
  }

  circle {
    fill: #ccc;
    stroke: #333;
    stroke-width: 1.5px;
  }

  .node.start circle {
    fill: #CFF09E;
  }

  .node.end circle {
    fill: #F56991;
  }

  .node.finished circle {
    fill: green;
  }

  .node.failed circle {
    fill: red;
  }
  text {
    font: 14px sans-serif;
    pointer-events: none;
    text-shadow: 0 1px 0 #fff, 1px 0 0 #fff, 0 -1px 0 #fff, -1px 0 0 #fff;
  }
