h1 = @workflow.class

#canvas-svg

script
  == "var links = #{JSON.dump(@links)};"

javascript:


  var WIDTH = 900, HEIGHT = 500;

  var drawD3Document = function(links) {
      var nodes = {};
      links.forEach(function(link) {
          link.source = nodes[link.source] || (nodes[link.source] = {
              name: link.source
          });
          link.target = nodes[link.target] || (nodes[link.target] = {
              name: link.target
          });
      });


      var zoom = d3.behavior.zoom().on("zoom", zoomed);

      function zoomed() {
        svg.attr("transform", "translate(" + d3.event.translate + ")scale(" + d3.event.scale + ")");
      }

      var width = WIDTH, height = HEIGHT;
      var force = d3.layout.force()
          .nodes(d3.values(nodes))
          .links(links).size([ width, height ])
          .linkDistance(100)
          .friction(0.8)
          .gravity(0)
          .charge(-150).on("tick", tick).start();
      var svg = d3.select("#canvas-svg")
          .append("svg").attr("width", width).call(zoom).attr("height", height);
      svg.append("svg:defs").selectAll("marker")
          .data([ "end" ]).enter()
          .append("svg:marker").attr("id", String)
          .attr("viewBox", "0 -5 10 10")
          .attr("refX", 15).attr("refY", -1.5)
          .attr("markerWidth", 6).attr("markerHeight", 6)
          .attr("orient", "auto").append("svg:path")
          .attr("d", "M0,-5L10,0L0,5");

      var path = svg.append("g").selectAll("path")
          .data(force.links())
          .enter()
          .append("g")
          .attr("class", "link-group")
          .append("path")
              .attr("class", "link")
              .attr("id", function(d, i) { return "link" + i;})
              .attr("marker-end", "url(#end)");

      svg.selectAll(".link-group").append("text")
          .attr("dy", "-0.5em")
          .append("textPath")
          .attr("startOffset",function(d,i){return 8/20;})
          .attr("xlink:href",function(d,i){return "#link"+i;})
          .text(function(d) { return d.value; })
          ;

      var node = svg.selectAll(".node")
          .data(force.nodes())
          .enter().append("g")
          .attr("class", "node").call(force.drag);
      node.append("circle")
          .attr("r", 6);
      node.append("text")
          .attr("x", 12)
          .attr("dy", ".35em").text(function(d) {
          return d.name;
      });
      function tick() {
          path.attr("d", function(d) {
              var dx = d.target.x - d.source.x, dy = d.target.y - d.source.y, dr = Math.sqrt(dx * dx + dy * dy);
              return "M" + d.source.x + "," + d.source.y + "A" + dr + "," + dr + " 0 0,1 " + d.target.x + "," + d.target.y;
          });
          node.attr("transform", function(d) {
              return "translate(" + d.x + "," + d.y + ")";
          });
      }
  };

  drawD3Document(links);

css:
  .link {
    fill: none;
    stroke: #666;
    stroke-width: 2px;
  }

  circle {
    fill: #ccc;
    stroke: #333;
    stroke-width: 1.5px;
  }

  text {
    font: 10px sans-serif;
    pointer-events: none;
    text-shadow: 0 1px 0 #fff, 1px 0 0 #fff, 0 -1px 0 #fff, -1px 0 0 #fff;
  }
